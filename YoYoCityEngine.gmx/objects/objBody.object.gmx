<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scale = 0.21;

pcDefineDefault();

driveType     = DRIVE_RWD;  // _RWD, _FWD, _4WD. If using _4WD you actually will need to lower the power (maxDriveForce)
maxMoveSpeed  = 12;         // Top speed essentially. This varies on the pixel-meter ratio. So in theory 19 could be 50MPH, just a matter of translation.
maxDriveForce = 83;         // The force applied to the wheels, I guess this translates best as torque. (It's weird because there's no wheel friction, only lateral grip)
steerLow      = 1;          // Steering response at low speed (0 being unresponsive, 1 being completely responsive)
steerHigh     = 0.8;        // Steering response at high speed (0 being unresponsive, 1 being completely responsive, so 0.5 is semi-responsive)
maxSteerAngle = 50;         // Wheel angle/turning circle at low speed
minSteerAngle = 20;         // Wheel angle/turning circle at high speed
frontGrip     = 5;          // LATERAL grip of front tyres
rearGrip      = 3.5;          // LATERAL Grip of rear tyres
frontBrakes   = 5;
rearBrakes    = 20;
toe           = 0;          // This is the individual inward angle (degrees) of the front tyres, negative is an outward angle
ackerman      = 1.44;       // 1.44 = 36 / 24 degrees. The ratio of turn between inside and outside tyres.

pcModelPhysicsBody();
pcModelJointWheels();
pcApplyProperties();
pcApplySettingsToWheels();

diff = (sprite_yoffset*3)/sprite_get_height(sprCarBody);
image_xscale = diff*scale;
image_yscale = diff*scale;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Destroy wheels for this body
with (wheelFL) instance_destroy();
with (wheelFR) instance_destroy();
with (wheelRL) instance_destroy();
with (wheelRR) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.Mode == MODE_PLAY)
    {
    // Control the car
    pcHandleSteering();
    pcHandleDriving();
    
    // Define potential position of camera
    var frontDistance = 500;    // How many pixels in front of the car the camera should be at top speed.
    var upHeight      = 500;    // How many pixels higher the camera should be at top speed
    var transition    = 0.1;    // The speed at which we transition to the new position (0-1; lower = slower/smoother)
    var velocity = GetLinearSpeed();
    var xPos = x + lengthdir_x(frontDistance*(velocity/maxMoveSpeed), phy_rotation-90);
    var yPos = y - lengthdir_y(frontDistance*(velocity/maxMoveSpeed), phy_rotation-90);
    var zPos = -650-(upHeight*(abs(velocity)/maxMoveSpeed));
    
    // Move camera to position
    oCamera.CameraX = lerp(oCamera.CameraX, xPos, transition);
    oCamera.CameraY = lerp(oCamera.CameraY, yPos, transition);
    oCamera.CameraZ = lerp(oCamera.CameraZ, zPos, transition);
    
    // Camera collisions
    var up    = GetColumnSize(floor(oCamera.CameraX/64), floor(-oCamera.CameraY/64-0.8));
    var down  = GetColumnSize(floor(oCamera.CameraX/64), floor(-oCamera.CameraY/64+0.8));
    var left  = GetColumnSize(floor(oCamera.CameraX/64-0.8), floor(-oCamera.CameraY/64));
    var right = GetColumnSize(floor(oCamera.CameraX/64+0.8), floor(-oCamera.CameraY/64));

    zz = 8;
    
    while (down &gt; zz)
        {
        oCamera.CameraY += 0.1;
        down  = GetColumnSize(floor(oCamera.CameraX/64), floor(-oCamera.CameraY/64+0.1));
        }
    
    while (up &gt; zz)
        {
        oCamera.CameraY -= 0.1;
        up  = GetColumnSize(floor(oCamera.CameraX/64), floor(-oCamera.CameraY/64-0.1));
        }
        
    while (left &gt; zz)
        {
        oCamera.CameraX += 0.1;
        left  = GetColumnSize(floor(oCamera.CameraX/64-0.1), floor(-oCamera.CameraY/64));
        }
        
    while (right &gt; zz)
        {
        oCamera.CameraX -= 0.1;
        right  = GetColumnSize(floor(oCamera.CameraX/64+0.1), floor(-oCamera.CameraY/64));
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parObject">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (other.phy_speed &gt; 1)
    other.doEffect = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPedestrian">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>                        
var damage;
damage = point_distance(phy_speed_x, phy_speed_y, other.x-other.xprevious, other.y-other.yprevious);

if (damage &gt; 1.5)
    {
    with (other)
        hp -= damage;
        
    PedestriansPanic(x, y, -1, 8*64);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTrafficCar">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with (other)
    {
    active = false;
    OccupyEmpty(occupiedCells);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>136,16</point>
    <point>136,288</point>
    <point>16,288</point>
  </PhysicsShapePoints>
</object>
