<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create everything
global.Controller = id;
global.XSpeed = 32;
global.YSpeed = 32;
global.ZSpeed = 32;
global.Mode = MODE_PLAY;
FreeCursorMode=0;
Tick=0;
PickingMode=-1;
PickX1=0;
PickY1=0;
PickZ1=0;
PickX2=0;
PickY2=0;
PickZ2=0;
PickFace=-1;
PickAnchor=false;
MButton=0;

TilePickY=-1;
TilePickX=-1;
TilePickZ=-1;
TilePickFace=-1;
SelectionInstance=-1000;

// Need to keep the mouse buttons non-local.
KMleft = 0;
KMright = 0;
KMmiddle = 0;
KMwheelup=false;
KMwheeldown=false;
Kinsert = false;
Kdelete = false;
Kescape=false;
KZctrl = false;
SelectionPick=false;

global.DoPick=false;
global.PickMouseX=0;
global.PickMouseY=0;
global.EditorMode=EDIT_SELECTION;
global.EditorMode_Sub=EDIT_SUB_NONE;
//global.EditorMode=EDIT_PAINT;
//global.EditorMode_Sub=EDIT_SUB_LID;
global.LeftMouseTile = 2;               
global.RightMouseTile = 6;
global.LeftMouseSprite = 1;               

// used when painting..... flags are set into the current "painted" face.
// bit 1=Fip-Vertically, bit 2=Flip-Horizontally, bit 3=Rotate 90
global.FlipRotateFlags = 0;

ShadowCamera = instance_create(0,0,oCamera);
GameCamera = instance_create(0,0,oCamera);
EditorCamera = instance_create(0,0,oCamera);
SetCamera(GameCamera);

Map = instance_create(0,0,oMap);
global.Map = Map;
global.CurrentPolyCount = 0;

// Try to load a default map
var filename = "map.city";
//debug("DIR="+working_directory+filename);
var loadit = file_exists(filename);
if( loadit ){
    with(global.Map){
        var buff = buffer_load(filename);
        LoadMap(id,buff);
        
        // Create physics world controller
        instance_create(0, 0, objPhysicsController);
        
        instance_create(0, 0, objTrafficSpawner);
        
        SpawnPlayer();
    }
}



EndDraw = instance_create(0,0,oEndDraw);
Shadows = instance_create(0,0,oShadows);
HUD = instance_create(0,0,oHUDMain);


DiffuseSurface=-1;
SelectionSurface=-1;

dir =0;
zdir=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("destroy controller");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle everything - states, movement etc.

// Toggle between game and editor
var key=keyboard_check_pressed(vk_f1);
if( key!=0 ){
    if( global.Mode==MODE_EDIT ){
        KillSelection();
        global.Mode=MODE_PLAY;
    }else if( global.Mode==MODE_PLAY ){
        global.Mode=MODE_EDIT;
    }
}



if( global.Mode== MODE_PLAY ){
    ProcessGame();
}else if( global.Mode== MODE_EDIT ){
    ProcessEditor();
}

// Toggle debug drawing
if (keyboard_check_pressed(vk_f4))
    global.drawDebug ^= true;
    
// Toggle drawing of road direction flags
if (keyboard_check_pressed(vk_f5))
    global.renderRoadFlags ^= true;


var camera = global.Camera;

//Switch game mode if Tab is pressed
if keyboard_check_released(vk_tab)
{
    if (global.Mode==MODE_EDIT)
    {    
        if (FreeCursorMode==0)
        {
            FreeCursorMode=1;
        }
        else
        {
            with(oHUDParent) instance_destroy()
            FreeCursorMode=0;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI etc

d3d_transform_set_identity();
d3d_set_perspective(false);              

if( surface_exists(DiffuseSurface) ){
    draw_enable_alphablend(false);
    if( os_type == os_android ){
        draw_surface_stretched(DiffuseSurface,0,0,1920,1080);
    }else{
        draw_surface(DiffuseSurface,0,0);
    }
    draw_enable_alphablend(true);    
//    draw_surface(SelectionSurface,0,0);
}

/*
if( surface_exists(Shadows.ShadowSurface) ){
    draw_enable_alphablend(false);
    draw_surface_stretched(Shadows.ShadowSurface,window_get_width()-256,0,256,256);
    draw_enable_alphablend(true);    
//    draw_surface(SelectionSurface,0,0);
}
*/

/*
draw_set_font(arial);
draw_set_halign(fa_left)
draw_set_valign(fa_top)
var s,aa,vs;      
var cam = global.Camera;


s = "("+string(cam.GroundX1)+","+string(cam.GroundY1)+","+string(cam.GroundX2)+","+string(cam.GroundY2)+")";
draw_outline( 40,2, s, c_white );

s = "button ("+string(KMleft)+","+string(KMmiddle)+","+string(KMright)+")   P="+string(global.DoPick)+","+string(PickingMode);
draw_outline( 40,22, s, c_white );
s = "button ("+string(PickX1)+","+string(PickY1)+","+string(PickZ1)+")   ("+string(PickX2)+","+string(PickY2)+","+string(PickZ2)+")";
draw_outline( 40,42, s, c_white );
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This is the FIRST draw object
{
    if( !surface_exists(DiffuseSurface) ){
        DiffuseSurface = surface_create(view_wport[0],view_hport[0] );
    }
    if( !surface_exists(SelectionSurface) ){
        SelectionSurface = surface_create(view_wport[0],view_hport[0] );
    }
   
    EndDraw.DiffuseSurface = DiffuseSurface;
    EndDraw.SelectionSurface = SelectionSurface;


    // Initialise 3D
    d3d_start();
    d3d_set_perspective(true);
    d3d_set_hidden(true);
    d3d_set_culling(true);        
    d3d_set_projection_perspective(0,0, room_width, room_height, 90);  

        
    /*// Work out unit light vector
    LightX = 0.2;
    LightY = 0.45;
    LightZ =  1.0;
    var d = 1.0/sqrt(LightX*LightX+LightY*LightY+LightZ*LightZ);
    LightX = LightX*d;
    LightY = LightY*d;
    LightZ = LightZ*d;
                        

    // Start the drawing sequence.    
    draw_set_color(c_red);
    d3d_set_lighting(true);
    d3d_light_define_direction(0,  LightX,LightY,LightZ, $fce7ce);
    d3d_light_define_ambient($ff404040);
    d3d_light_enable(0,true);           
    d3d_set_lighting(true);*/
    
    // First set surfaces and reset projection
    surface_set_target(DiffuseSurface);
    if(!global.HTML5) surface_set_target_ext(1,SelectionSurface);
    draw_clear_alpha(c_black,0);
    SetProjection(global.Camera);

    

    // Work out visible map bounds.
    global.groundx1 = floor( GameCamera.GroundX1/Map.TileSize/Map.GridCacheSize )-1;
    global.groundy1 = floor( GameCamera.GroundY1/Map.TileSize/Map.GridCacheSize )-1;
    global.groundx2 = floor( (GameCamera.GroundX2+(Map.GridCacheSize*Map.TileSize)-1)/Map.TileSize/Map.GridCacheSize )+1;
    global.groundy2 = floor( (GameCamera.GroundY2+(Map.GridCacheSize*Map.TileSize)-1)/Map.TileSize/Map.GridCacheSize )+1;
    global.TotalGridBlocks = (global.groundx2-global.groundx1)*(global.groundy2-global.groundy1);
               
    global.CurrentPolyCount = 0;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go in/out of fullscreen mode
if( keyboard_check(vk_alt) )
{
    if( !window_get_fullscreen() )
    {
        FullscreenMode(true);
    }else{
        FullscreenMode(false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End game on Control+Escape
if( keyboard_check(vk_shift) ){
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
