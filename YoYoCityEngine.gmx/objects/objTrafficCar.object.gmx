<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTraffic</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scale = 0.65;//0.21;
//diff = (sprite_yoffset*1.5)/sprite_get_height(sprCarBody);
image_xscale = scale;//diff*scale;
image_yscale = scale;//diff*scale;


Speed = 0;
DesiredSpeed = 4;
VisualX = x;
VisualY = y;
DesiredX = x;
DesiredY = y;
myCellX = floor(x/64);
myCellY = ceil(y/64);
myCellZ = 4;
Direction = direction;
DesiredDirection = direction;
Animate = false;

// Traffic flow test
routeCoordinates = ds_list_create();
occupiedCells = ds_list_create();
madeDecision = false;
parked = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
OccupyEmpty(occupiedCells);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Despawn if too far away from player
halfRegion = round(-oCamera.CameraZ)+8*64;
if (point_distance(x, y, oCamera.CameraX, oCamera.CameraY) &gt; halfRegion)
    {
    instance_destroy();
    exit;
    }

if (point_distance(x, y, DesiredX, DesiredY) &lt; 48)
    {
    // Remove last cell from lists
    OccupyFree(occupiedCells, 0);
    ds_list_delete(routeCoordinates, 0);
    ds_list_delete(routeCoordinates, 0);
    ds_list_delete(routeCoordinates, 0);
    
    if (!parked)
        {
        Animate = true;
        repeat (10)
            TrafficFindRoute();
        }
    else if (point_distance(x, y, DesiredX, DesiredY) &gt; 8)
        {
        DesiredSpeed = 0;
        Animate = true;
        direction += (((((dir - direction) mod 360) + 540) mod 360) - 180)/10;
        }
    else
        {
        Animate = false;
        }
    //show_debug_message(string(ds_list_size(occupiedCells)));
    }

    
if (!parked)
    {
    // Mark cells as used by this vehicle
    OccupyCells(occupiedCells, routeCoordinates, 4);
    
    // If unable to plan a longer path, alter speed
    switch (ds_list_size(occupiedCells))
        {
        case (1):
            DesiredSpeed = 0;
            break;
        case (2):
            DesiredSpeed = 2;
            break;
        default:
            DesiredSpeed = 4;
            break;
        }
    }
    

if (Animate)
    {
    Speed += sign(DesiredSpeed-Speed)*0.2;
    dir = point_direction(x, y, DesiredX, DesiredY);
    direction += (((((dir - direction) mod 360) + 540) mod 360) - 180)/10;
    dist = point_distance(x, y, DesiredX, DesiredY);
    if (dist &gt; 2)
        {
        x += lengthdir_x(Speed, direction);
        y += lengthdir_y(Speed, direction);
        }
    image_angle = direction+90;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>25,107</point>
    <point>54,54</point>
  </PhysicsShapePoints>
</object>
