<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Get infomation that we need
gridWidth  = oMap.MapWidth;
gridHeight = oMap.MapHeight;
cellCenterX = 0;
cellCenterY = 0;
halfRegion = 4;

spawnTimer = 30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with (objTrafficCar) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Handle spawning cooldown
if (--spawnTimer &gt; 0)
    exit;
else
    spawnTimer = 30;


// Define the grid area around the player to check for roads
var preCenterX = cellCenterX;
var preCenterY = cellCenterY;
cellCenterX = round(oCamera.CameraX/64);
cellCenterY = round(-oCamera.CameraY/64);

var startX, endX, topY, bottomY, xx, yy, cellValue, xPos, yPos, inst;

var startX = max(0, cellCenterX-halfRegion);
var endX = min(gridWidth, cellCenterX+halfRegion);
var topY = (cellCenterY-halfRegion);
var bottomY = (cellCenterY+halfRegion);

var hasRoad = false;

var lookat = choose(0, 1, 2, 3);

// Check top row
switch (lookat)
    {
    case (0):
        if (topY &gt; 0)
            {
            yy = topY;
            for (xx=startX; xx&lt;endX; xx++)
                {
                zz = 4; // Defining this as it may later be used for varying heights
                cellValue = GetBlockIndex(xx, yy, zz);
                if (cellValue)
                    {
                    block = MakeUnique(global.Map, xx, yy, zz);
                    var info  = oMap.block_info[block];
                    var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                    if (roadFlags)
                        {
                        xPos = xx*64+32;
                        yPos = -yy*64-32;
                        inst = instance_nearest(xPos, yPos, objTrafficCar);
                        if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                            {
                            hasRoad = true;
                            break;
                            }
                        }
                    }
                }
            }
    break;
    case (1):
        if (startX &gt; 0)
            {
            yy = bottomY;
            for (xx=startX; xx&lt;endX; xx++)
                {
                zz = 4; // Defining this as it may later be used for varying heights
                cellValue = GetBlockIndex(xx, yy, zz);
                if (cellValue)
                    {
                    block = MakeUnique(global.Map, xx, yy, zz);
                    var info  = oMap.block_info[block];
                    var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                    if (roadFlags)
                        {
                        xPos = xx*64+32;
                        yPos = -yy*64-32;
                        inst = instance_nearest(xPos, yPos, objTrafficCar);
                        if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                            {
                            hasRoad = true;
                            break;
                            }
                        }
                    }
                }
            }
    break;
    case (2):
        if (bottomY &gt; 0)
            {
            xx = startX;
            for (yy=topY; yy&lt;bottomY; yy++)
                {
                zz = 4; // Defining this as it may later be used for varying heights
                cellValue = GetBlockIndex(xx, yy, zz);
                if (cellValue)
                    {
                    block = MakeUnique(global.Map, xx, yy, zz);
                    var info  = oMap.block_info[block];
                    var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                    if (roadFlags)
                        {
                        xPos = xx*64+32;
                        yPos = -yy*64-32;
                        inst = instance_nearest(xPos, yPos, objTrafficCar);
                        if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                            {
                            hasRoad = true;
                            break;
                            }
                        }
                    }
                }
            }
    break;
    case (3):
        if (bottomY &gt; 0)
            {
            xx = endX;
            for (yy=topY; yy&lt;bottomY; yy++)
                {
                zz = 4; // Defining this as it may later be used for varying heights
                cellValue = GetBlockIndex(xx, yy, zz);
                if (cellValue)
                    {
                    block = MakeUnique(global.Map, xx, yy, zz);
                    var info  = oMap.block_info[block];
                    var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                    if (roadFlags)
                        {
                        xPos = xx*64+32;
                        yPos = -yy*64-32;
                        inst = instance_nearest(xPos, yPos, objTrafficCar);
                        if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                            {
                            hasRoad = true;
                            break;
                            }
                        }
                    }
                }
            }
    break;
    }


if (hasRoad)
    {
    // Convert roadFlags into variables we can read
    var north = (roadFlags &amp; 8) &gt; 0; // 1000 = 8
    var east  = (roadFlags &amp; 4) &gt; 0; // 0100 = 4
    var south = (roadFlags &amp; 2) &gt; 0; // 0010 = 2
    var west  = (roadFlags &amp; 1) &gt; 0; // 0001 = 1
    
    show_debug_message("Unoccupied road found, spawning traffic at "+string(xPos)+", "+string(yPos));
    var newCar = instance_create(xPos, yPos, objTrafficCar);
    newCar.z = 255+8;
    
    if (north) newCar.direction = 270;
    if (east)  newCar.direction = 0;
    if (south) newCar.direction = 90;
    if (west)  newCar.direction = 180;
    newCar.image_angle = newCar.direction-90;
    
    //newCar.x -= lengthdir_x(32, newCar.direction);
    //newCar.y -= lengthdir_y(32, newCar.direction);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
