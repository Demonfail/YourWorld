<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Get infomation that we need
gridWidth  = oMap.MapWidth;
gridHeight = oMap.MapHeight;
cellCenterX = 0;
cellCenterY = 0;
halfRegion = 4;

// Set limits
pedestrianLimit = 30;
spawnLimit = 20;
spawnTimer = 30;

// Have a memory
occupiedCells = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Kill all mobiles
with (objTrafficCar) instance_destroy();
with (objPedestrian) instance_destroy();

// Free data
ds_list_destroy(occupiedCells);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// If we are even allowed to spawn traffic
if (!global.enableTrafficSpawn)
    exit;

// Handle spawning cooldown
if (--spawnTimer &gt; 0)
or (instance_number(objTrafficCar) &gt;= spawnLimit
&amp;&amp; instance_number(objPedestrian) &gt;= pedestrianLimit)
    exit;
else
    spawnTimer = 10;


// Define the grid area around the player to check for roads
var preCenterX = cellCenterX;
var preCenterY = cellCenterY;
cellCenterX = round(oCamera.CameraX/64);
cellCenterY = round(-oCamera.CameraY/64);
halfRegion = round(-oCamera.CameraZ/64);

var startX, endX, topY, bottomY, xx, yy, cellValue, xPos, yPos, inst;

startX = max(0, cellCenterX-halfRegion);
endX = min(gridWidth, cellCenterX+halfRegion);
topY = (cellCenterY-halfRegion);
bottomY = (cellCenterY+halfRegion);

var hasRoad, roadOptions, paveOptions;
hasRoad = false;    // Bool
hasPave = false;    // Bool
roadOptions = 0;    // Array
paveOptions = 0;    // Array

// Pick a random side to scan, bias towards direction you're moving
var lookat;
lookat = choose(0, 1, 2, 3);
if (objBody.phy_speed_y &lt; -2) lookat = 1;
if (objBody.phy_speed_y &gt; 2)  lookat = 0;
if (objBody.phy_speed_x &lt; -2) lookat = 2;
if (objBody.phy_speed_x &gt; 2)  lookat = 3;

pn = 0;
n = 0;
switch (lookat)
    {
    // Top row
    case (0):
        yy = topY;
        for (xx=startX; xx&lt;endX; xx++)
            {
            zz = 4; // Defining this as it may later be used for varying heights
            cellValue = GetBlockIndex(xx, yy, zz);
            if (cellValue)
                {
                block = MakeUnique(global.Map, xx, yy, zz);
                var info  = oMap.block_info[block];
                var paveFlag = (info[BLK_FLAGS1] &gt;&gt; 26) &amp; 1;
                var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                
                if (paveFlag)
                    {
                    hasPave = true;
                    xPos = xx*64+random_range(8, 56);
                    yPos = -yy*64-random_range(8, 56);;//// CANT USE N
                    paveOptions[pn++] = xPos;
                    paveOptions[pn++] = yPos;
                    }
                
                if (roadFlags)
                    {
                    xPos = xx*64+32;
                    yPos = -yy*64-32;
                    
                    xx = floor(xPos/64);
                    yy = floor(yPos/64);
                    cellID = (yy * oMap.MapHeight) + xx;
                    
                    inst = instance_nearest(xPos, yPos, objTrafficCar);
                    if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                    or (ds_list_find_index(occupiedCells, cellID) == -1)
                        {
                        hasRoad = true;
                        roadOptions[n++] = xPos;
                        roadOptions[n++] = yPos;
                        roadOptions[n++] = roadFlags;
                        }
                    }
                }
            }
    break;
    
    // Bottom row
    case (1):
        yy = bottomY;
        for (xx=startX; xx&lt;endX; xx++)
            {
            zz = 4; // Defining this as it may later be used for varying heights
            cellValue = GetBlockIndex(xx, yy, zz);
            if (cellValue)
                {
                block = MakeUnique(global.Map, xx, yy, zz);
                var info  = oMap.block_info[block];
                var paveFlag = (info[BLK_FLAGS1] &gt;&gt; 26) &amp; 1;
                var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                
                if (paveFlag)
                    {
                    hasPave = true;
                    xPos = xx*64+random_range(8, 56);
                    yPos = -yy*64-random_range(8, 56);
                    paveOptions[pn++] = xPos;
                    paveOptions[pn++] = yPos;
                    }
                
                if (roadFlags)
                    {
                    xPos = xx*64+32;
                    yPos = -yy*64-32;
                    inst = instance_nearest(xPos, yPos, objTrafficCar);
                    if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                        {
                        hasRoad = true;
                        roadOptions[n++] = xPos;
                        roadOptions[n++] = yPos;
                        roadOptions[n++] = roadFlags;
                        }
                    }
                }
            }
    break;
    
    // Left column
    case (2):
        xx = startX;
        for (yy=topY; yy&lt;bottomY; yy++)
            {
            zz = 4; // Defining this as it may later be used for varying heights
            cellValue = GetBlockIndex(xx, yy, zz);
            if (cellValue)
                {
                block = MakeUnique(global.Map, xx, yy, zz);
                var info  = oMap.block_info[block];
                var paveFlag = (info[BLK_FLAGS1] &gt;&gt; 26) &amp; 1;
                var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                
                if (paveFlag)
                    {
                    hasPave = true;
                    xPos = xx*64+random_range(8, 56);;
                    yPos = -yy*64-random_range(8, 56);;
                    paveOptions[pn++] = xPos;
                    paveOptions[pn++] = yPos;
                    }
                
                if (roadFlags)
                    {
                    xPos = xx*64+32;
                    yPos = -yy*64-32;
                    inst = instance_nearest(xPos, yPos, objTrafficCar);
                    if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                        {
                        hasRoad = true;
                        roadOptions[n++] = xPos;
                        roadOptions[n++] = yPos;
                        roadOptions[n++] = roadFlags;
                        }
                    }
                }
            }
    break;
    
    // Right column
    case (3):
        xx = endX;
        for (yy=topY; yy&lt;bottomY; yy++)
            {
            zz = 4; // Defining this as it may later be used for varying heights
            cellValue = GetBlockIndex(xx, yy, zz);
            if (cellValue)
                {
                block = MakeUnique(global.Map, xx, yy, zz);
                var info  = oMap.block_info[block];
                var paveFlag = (info[BLK_FLAGS1] &gt;&gt; 26) &amp; 1;
                var roadFlags = (info[BLK_FLAGS1] &gt;&gt; 22) &amp; $F;
                
                if (paveFlag)
                    {
                    hasPave = true;
                    xPos = xx*64+random_range(8, 56);;
                    yPos = -yy*64-random_range(8, 56);;
                    paveOptions[pn++] = xPos;
                    paveOptions[pn++] = yPos;
                    }
                
                if (roadFlags)
                    {
                    xPos = xx*64+32;
                    yPos = -yy*64-32;
                    inst = instance_nearest(xPos, yPos, objTrafficCar);
                    if (point_distance(xPos, yPos, inst.x, inst.y) &gt; 128)
                        {
                        hasRoad = true;
                        roadOptions[n++] = xPos;
                        roadOptions[n++] = yPos;
                        roadOptions[n++] = roadFlags;
                        }
                    }
                }
            }
    break;
    }

if (hasPave &amp;&amp; instance_number(objPedestrian) &lt; pedestrianLimit) NewPedestrian(paveOptions);
if (hasRoad &amp;&amp; instance_number(objTrafficCar) &lt; spawnLimit) NewTrafficCar(roadOptions);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
