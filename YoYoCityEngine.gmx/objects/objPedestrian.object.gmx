<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPed1_Walking</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hp = 3;
active = true;
scatter = false;
scatterTimer = 0;

image_xscale = 0.5;
image_yscale = 0.5;
image_speed = 0;
direction = random(360);

// Define sprites
PedIndex = choose(1, 2, 3, 4);
WalkingSprite = asset_get_index('sprPed'+string(PedIndex)+'_Walking');
RunningSprite = asset_get_index('sprPed'+string(PedIndex)+'_Running');
DeadSprite    = asset_get_index('sprPed'+string(PedIndex)+'_Dead');
sprite_index = WalkingSprite;

// Weighted speed
moveSpeed = 0.7 + choose(random(1.5), random(1.0), random(0.5));

// Physics shape
var myFixture;
myFixture = physics_fixture_create();
physics_fixture_set_circle_shape(myFixture, 8);
physics_fixture_set_collision_group(myFixture, 1);
physics_fixture_set_density(myFixture, 0.02);
physics_fixture_set_linear_damping(myFixture, 50.0);
physics_fixture_set_angular_damping(myFixture, 50.0);
physics_fixture_set_restitution(myFixture, 0.0);
physics_fixture_bind(myFixture, id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//-----------------------------------------------------------------------------
// Despawn if too far away from player
var halfRegion;
halfRegion = round(-oCamera.CameraZ)+8*64;
if (point_distance(x, y, oCamera.CameraX, oCamera.CameraY) &gt; halfRegion)
    {
    instance_destroy();
    exit;
    }
    
    
//-----------------------------------------------------------------------------
// Kill if health has depleated, spawn splat image
if (hp &lt;= 0)
    {
    instance_destroy();
    var bloodSprite, rand;
    repeat (5)
        {
        rand = string(irandom_range(1, 7));
        bloodSprite = asset_get_index("sprBlood"+rand);
        show_debug_message("sprBlood"+rand);
        CreateSplat(x+random_range(-16, 16), y+random_range(-16, 16), z-1, bloodSprite, image_xscale);
        }
    CreateSplat(x, y, z, DeadSprite, image_xscale);
    exit;
    }
    
    
//-----------------------------------------------------------------------------
// Scatter (AKA Panic) control timer
if (scatter)
    {
    if (!scatterTimer--)
        {
        scatter = false;
        moveSpeed = 0.7 + choose(random(1.5), random(1.0), random(0.5));
        }
    }


//----------------------------------------------------------------------------- 
// If ped is active; has AI control basically
if (active)
    {
    phy_position_x += lengthdir_x(moveSpeed, direction);
    phy_position_y += lengthdir_y(moveSpeed, direction);
    
    // Detect potential collisions
    var checkxy, checkyr, checkxl, checkyl, hasr, hasl;
    checkxr = (x+lengthdir_x(32, direction+16));
    checkyr = (y+lengthdir_y(32, direction+16));
    checkxl = (x+lengthdir_x(32, direction-16));
    checkyl = (y+lengthdir_y(32, direction-16));
    hasr = !GetHasPavement(floor(checkxl/64), floor(checkyl/64)+1, 4);
    hasl = !GetHasPavement(floor(checkxr/64), floor(checkyr/64)+1, 4);
    hasr |= physics_test_overlap(checkxl, checkyl, 0, objBody);
    hasl |= physics_test_overlap(checkxr, checkyr, 0, objBody);
    hasr |= physics_test_overlap(checkxl, checkyl, 0, objTrafficCar);
    hasl |= physics_test_overlap(checkxr, checkyr, 0, objTrafficCar);
    
    // If potential collisions ahead, turn to avoid
    if (hasr)      direction += 16;
    else if (hasl) direction -= 16;
    
    // Change to running sprite if we're moving fast enough
    if (moveSpeed &gt; 1.5)
        sprite_index = RunningSprite;
    else
        sprite_index = WalkingSprite;
    
    image_angle = direction+90;
    phy_rotation = -image_angle;
    image_index += moveSpeed/5;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,19</point>
    <point>19,19</point>
  </PhysicsShapePoints>
</object>
