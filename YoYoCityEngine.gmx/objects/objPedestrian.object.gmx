<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPed1_Walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_xscale = 0.5;
image_yscale = 0.5;
image_speed = 0.25;
direction = random(360);

sprite_index = choose(sprPed1_Walking, sprPed2_Walking, sprPed3_Walking);

//var newPosition = GetPavementDirection(floor(x/64), floor(y/64), 4);
//destX = newPosition[0];
//destY = newPosition[1];

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//-----------------------------------------------------------------------------
// Despawn if too far away from player
var halfRegion;
halfRegion = round(-oCamera.CameraZ)+8*64;
if (point_distance(x, y, oCamera.CameraX, oCamera.CameraY) &gt; halfRegion)
    {
    instance_destroy();
    exit;
    }


x += lengthdir_x(1, direction);
y += lengthdir_y(1, direction);

checkxr = floor((x+lengthdir_x(32, direction+16))/64);
checkyr = floor((y+lengthdir_y(32, direction+16))/64);
checkxl = floor((x+lengthdir_x(32, direction-16))/64);
checkyl = floor((y+lengthdir_y(32, direction-16))/64);

if (!GetHasPavement(checkxl, checkyl+1, 4))
    direction += 16;
    
else if (!GetHasPavement(checkxr, checkyr+1, 4))
    direction -= 16;
    
image_angle = direction+90;

/*
var dist, dir;
dist = point_distance(x, y, destX, destY);
dir = point_direction(x, y, destX, destY);

if (dist &gt; 4)
    {
    x += lengthdir_x(2, dir);
    y += lengthdir_y(2, dir);
    }
else
    {
    var newPosition = GetPavementDirection(floor(x/64), floor(y/64), 4);
    destX = newPosition[0];
    destY = newPosition[1];
    }
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,19</point>
    <point>19,19</point>
  </PhysicsShapePoints>
</object>
