<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create an empty map

StyleSprite=sStyle1;
CreateMap(256,256,32, 16, 0,82,7, 64,70,4);

//StyleSprite=sStyle2;
//CreateMap(256,256,16, 8, 0,20,7, 64,70);

// HTML5?
/*HTML5=false;
CityShader=RenderPlusSelection;
if( os_browser != browser_not_a_browser ){
    HTML5=true;
    CityShader=SimpleShader;
}
*/
CityFormat = global.CityFormat;

MouseX=0;
MouseY=0;

PickPixel=$7fffffff;
LastFileName="mymap.city";

// Create the water plane
Water = instance_create(0,0,oWater);

// Create physics representation
physics_world_create(0.0313);
physics_world_gravity(0.0, 0.0);

instance_create(0, 0, objMinimap);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do load/save after
if( LoadSave==1 )
{
    var buff = SaveMap(id);
    var filename = get_save_filename("YoYo City Maps|*.city",LastFileName);
    if( filename!="" ){
        debug("filename="+filename);
        LastFileName=filename;
        buffer_save_ext(buff, LastFileName, 0, buffer_tell(buff));
    }
}else{
    var filename = get_open_filename("YoYo City Maps|*.city",LastFileName);
    if( filename!=""){
        LastFileName=filename;
        var buff = buffer_load(LastFileName);
        LoadMap(id,buff);
        
        // Create physics world controller
        instance_create(0, 0, objPhysicsController);
        
        instance_create(0, 0, objTrafficSpawner);
        
        SpawnPlayer();
    }
}
FullscreenMode(fullscreen);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Render the map
var camera = global.Camera;


// Render the sky
draw_clear(c_black);

        
// Now render the map
var texture = sprite_get_texture(StyleSprite, 0);
var sprtexture = sprite_get_texture(sTree, 0);   // Any decal, they should all be on the same sheet!
RenderMap( global.groundx1,global.groundy1,global.groundx2,global.groundy2, texture, sprtexture, global.CityShader, global.SpriteShader ); 
with(Water) DrawWater();

draw_set_alpha_test(true);


// DEBUG CHECKING FOR 3D&gt;2D
if (keyboard_check_pressed(vk_f9))
    toScreenXY();


// Draw temporary splat images, these fade out
with (objSplat)
    Draw3dSprite(sprite_index, image_index, x, -y, z, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    
// Draw all Objects
with (parObject)
    Draw3dSprite(sprite_index, image_index, x, -y, z, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    
// Draw all Objects
with (objObjectParticle)
    Draw3dSprite(sprite_index, image_index, x, -y, z, image_xscale, image_yscale, image_angle, image_blend, image_alpha);


// Draw all sprites
shader_set(global.SpriteShader);
with (oSprite)
    Draw3dSprite(sprite_index, image_index,x,y,z, image_xscale,image_yscale, image_angle, image_blend, image_alpha);
shader_reset();
with (objSpritePlacer)
    {
    if (sprite_exists(sprite_index))
        Draw3dSprite(sprite_index, 0, x, y, z, 1, 1, 0, c_white, 1.0);
    }

    
// Draw the car
with(objBody)
    {
    Draw3dSprite(sprite_index, image_index, x+3, -y-3, z+1, image_xscale, image_yscale, image_angle, c_black, 0.3);               // Shadow
    Draw3dSprite(sprite_index, image_index, x,   -y,   z+4, image_xscale, image_yscale, image_angle, image_blend, 1.0);   // Actual
    
    //worldMatrix = matrix_get(matrix_world)
    //show_debug_message("Matrix size check (4x4): "+string(array_length_1d(worldMatrix)))
    //for (n=0; n&lt;array_length_1d(worldMatrix); n++)
        //show_debug_message("Matrix value ["+string(n)+"]: "+string_format(worldMatrix[n], 4, 16));
    
    if (global.drawDebug)
        {
        var mat = matrix_build(0, 0, -270, 0, 0, 0, 1, 1, 1);
        matrix_set(matrix_world, mat);
        physics_draw_debug();
        }
    }

    
// Draw pedestrians
with (objPedestrian)
    {
    Draw3dSprite(sprite_index, image_index, x+2, -y-2, z+1, image_xscale, image_yscale, image_angle, c_black, 0.3);               // Shadow
    Draw3dSprite(sprite_index, image_index, x,   -y,   z+8, image_xscale, image_yscale, image_angle, image_blend, 1.0);   // Actual
    }
    
    
// Draw traffic cars
with (objTrafficCar)
    {
    Draw3dSprite(sprite_index, image_index, x+3, -y-3, z+1, image_xscale, image_yscale, image_angle, c_black, 0.3);               // Shadow
    Draw3dSprite(sprite_index, image_index, x,   -y,   z+4, image_xscale, image_yscale, image_angle, image_blend, 1.0);   // Actual
    
    if (global.drawDebug)
        {
        // Draw physics debug
        var mat = matrix_build(0, 0, -270, 0, 0, 0, 1, 1, 1);
        matrix_set(matrix_world, mat);
        physics_draw_debug();
        
        // Draw route
        var mat = matrix_build(0, 0, -270, 0, 0, 0, 1, 1, 1);
        matrix_set(matrix_world, mat);
        draw_set_alpha(1);
        draw_set_color(c_white);
        value = ds_list_find_value(occupiedCells, 0);
        yypre = floor(value / oMap.MapHeight);
        xxpre = value - (yypre * oMap.MapHeight);
        for (n=1; n&lt;ds_list_size(occupiedCells); n++)
            {
            value = ds_list_find_value(occupiedCells, n);
            yy = floor(value / oMap.MapHeight);
            xx = value - (yy * oMap.MapHeight);
            
            draw_line_width(xxpre*64+32, yypre*64-32, xx*64+32, yy*64-32, 5);
            
            xxpre = xx;
            yypre = yy;
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load the map
if( global.LoadSave ) {
    fullscreen = window_get_fullscreen();
    FullscreenMode(false);
    LoadSave=2;
    alarm[0]=2;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save the map
if( global.LoadSave ) {
    fullscreen = window_get_fullscreen();
    FullscreenMode(false);
    LoadSave=1;
    alarm[0]=2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
