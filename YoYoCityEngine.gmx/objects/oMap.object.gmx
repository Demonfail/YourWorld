<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create an empty map

StyleSprite=sStyle1;
CreateMap(256,256,32, 16, 0,82,7, 64,70,4);

//StyleSprite=sStyle2;
//CreateMap(256,256,16, 8, 0,20,7, 64,70);

// HTML5?
/*HTML5=false;
CityShader=RenderPlusSelection;
if( os_browser != browser_not_a_browser ){
    HTML5=true;
    CityShader=SimpleShader;
}
*/
CityFormat = global.CityFormat;

MouseX=0;
MouseY=0;

PickPixel=$7fffffff;
LastFileName="mymap.city";

// Create the water plane
Water = instance_create(0,0,oWater);

// Create physics representation
physics_world_create(0.0313);
physics_world_gravity(0.0, 0.0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do load/save after
if( LoadSave==1 )
{
    var buff = SaveMap(id);
    var filename = get_save_filename("YoYo City Maps|*.city",LastFileName);
    if( filename!="" ){
        debug("filename="+filename);
        LastFileName=filename;
        buffer_save_ext(buff, LastFileName, 0, buffer_tell(buff));
    }
}else{
    var filename = get_open_filename("YoYo City Maps|*.city",LastFileName);
    if( filename!=""){
        LastFileName=filename;
        var buff = buffer_load(LastFileName);
        LoadMap(id,buff);
        
        // Create physics world controller
        instance_create(0, 0, objPhysicsController);
        
        instance_create(0, 0, objTrafficSpawner);
        
        SpawnPlayer();
    }
}
FullscreenMode(fullscreen);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render the map
var camera = global.Camera;

{
        
        // Now render the map
        var texture = sprite_get_texture(StyleSprite,0);
        var sprtexture = sprite_get_texture(GetImage(global.LeftMouseSprite),0);
        RenderMap( global.groundx1,global.groundy1,global.groundx2,global.groundy2, texture, sprtexture, global.CityShader, global.SpriteShader );
        with(Water){ DrawWater(); }
        
        // Draw all sprites
        shader_set(global.SpriteShader);
        with(oSprite) Draw3dSprite(sprite_index, image_index,x,y,z, image_xscale,image_yscale, image_angle, image_blend, image_alpha);
        shader_reset();
        
        // Draw the car
        with(objBody)
            {
            Draw3dSprite(sprite_index, image_index,x+4,-y-4,z-1, image_xscale,image_yscale, image_angle, $40000000, 0.2);          // Shadow
            Draw3dSprite(sprite_index, image_index,x,-y,z, image_xscale,image_yscale, image_angle, image_blend|$ff000000, 1.0);  // Actual
            
            if (global.drawDebug)
                {
                var mat = matrix_build(0, 0, -257, 0, 0, 0, 1, 1, 1);
                matrix_set(matrix_world, mat);
                physics_draw_debug();
                }
            }
            
        // Draw traffic cars
        with(objTrafficCar)
            {
            Draw3dSprite(sprite_index, image_index, x+4, -y-4, z-1, image_xscale, image_yscale, image_angle, $40000000, 0.2);          // Shadow
            Draw3dSprite(sprite_index, image_index, x,   -y,   z, image_xscale, image_yscale, image_angle, image_blend|$ff000000, 1.0);  // Actual
            
            //Draw3dSprite(sprWheel, 0, DesiredX, -DesiredY, z, 1, 1, 0, image_blend|$ff000000, 1.0);  // Actual
            //Draw3dSprite(sprite_index, image_index, VisualX,   -VisualY,   z, image_xscale, image_yscale, image_angle, image_blend|$ff000000, 1.0);  // Actual
            }
         
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load the map
if( global.LoadSave ) {
    fullscreen = window_get_fullscreen();
    FullscreenMode(false);
    LoadSave=2;
    alarm[0]=2;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save the map
if( global.LoadSave ) {
    fullscreen = window_get_fullscreen();
    FullscreenMode(false);
    LoadSave=1;
    alarm[0]=2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
