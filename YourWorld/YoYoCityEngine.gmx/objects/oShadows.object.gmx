<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the Shadow system
Map = -1;
ShadowSurface=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render the map
{
        if( !surface_exists(ShadowSurface) ){
            ShadowSurface = surface_create(1024,1024);
        } 

        var camera = global.Camera;

        // Work out unit light vector
        LightX = 0.3;
        LightY = 0.6;
        LightZ =  1.0;
        var d = 1.0/sqrt(LightX*LightX+LightY*LightY+LightZ*LightZ);
        LightX = LightX*d;
        LightY = LightY*d;
        LightZ = LightZ*d;
                            
    
        // Start the drawing sequence.    
        draw_set_color(c_red);
        d3d_set_lighting(true);
        d3d_light_define_direction(0,  LightX,LightY,LightZ, $ffffff ); //$fce7ce);
        d3d_light_define_ambient($ff707070);
        d3d_light_enable(0,true);           
        d3d_set_lighting(true);
            
        
/*        
        var cx = camera.CameraX;// - (LightX*2500);
        var cy = camera.CameraY;// - (LightY*2500);
        var cz = 0; //1024 - LightZ*1000;
        surface_set_target(ShadowSurface);        
        draw_clear_alpha(c_red,0);
        
        //SetProjection(camera);
        
        // Work out visible map bounds.
        var Map = global.Map;
        global.groundx1 = floor( camera.GroundX1/Map.TileSize/Map.GridCacheSize )-1;
        global.groundy1 = floor( camera.GroundY1/Map.TileSize/Map.GridCacheSize )-1;
        global.groundx2 = floor( (camera.GroundX2+(Map.GridCacheSize*Map.TileSize)-1)/Map.TileSize/Map.GridCacheSize )+1;
        global.groundy2 = floor( (camera.GroundY2+(Map.GridCacheSize*Map.TileSize)-1)/Map.TileSize/Map.GridCacheSize )+1;
        global.TotalGridBlocks = (global.groundx2-global.groundx1)*(global.groundy2-global.groundy1);
        
        d3d_set_perspective(false);
        d3d_set_culling(false);
        d3d_set_projection_ext(cx,cy,cz, camera.CameraX,camera.CameraY,1024,  0,1,0,  45, 1,  32, 20000.0);

           
        // Now render the map
        var texture = sprite_get_texture(global.Map.StyleSprite,0); 
        var sprtexture = sprite_get_texture(sTree,0); 
        //debug("("+string(global.groundx1)+","+string(global.groundy1)+","+string(global.groundx2)+","+string(global.groundy2)+")"); 
        with(global.Map){
            RenderMap( global.groundx1,global.groundy1,global.groundx2,global.groundy2, texture, sprtexture, BlockShadowShader, SpriteSelectionShader );
            //RenderMap( 0,0,4,4, texture, sprtexture, SimpleShader, SpriteSelectionShader );
        }
        surface_reset_target();

        
        
        d3d_set_culling(true);
        d3d_set_perspective(true);
        SetProjection(camera);

*/        
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
