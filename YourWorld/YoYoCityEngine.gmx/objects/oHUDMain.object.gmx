<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10020</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialise "internal" values for rotate and flip
rotate_value=(global.FlipRotateFlags&gt;=4);

if (global.FlipRotateFlags &amp; 1==1 &amp;&amp; global.FlipRotateFlags &amp; 2==1)
{
    rotate_value+=2
}

Tooltip="";

DisableWheel=false; //This is used to override wheel scrolling if you scrolled in a window
                                
dovflip=(global.FlipRotateFlags &amp; 1)^(rotate_value&gt;1)
dohflip=(global.FlipRotateFlags &amp; 2)^(rotate_value&gt;1)

sButtonSprite[0]=sButtonNavbar;
sButtonSprite[1]=sButtonNavbarSel;

QuickSlotSelected=0;
QuickSlotMax=10;
for(var i=0;i&lt;QuickSlotMax*2+1;i+=1)
{
    QuickSlot[i,0]=EDIT_PAINT;   //Main type of item here
    QuickSlot[i,1]=EDIT_SUB_LID; //Sub type of item here
    QuickSlot[i,2]=-1;           //ID of item here
    QuickSlot[i,3]=sStyle1;      //Sprite
    QuickSlot[i,4]=0;            //x of left
    QuickSlot[i,5]=0;            //y of top
    QuickSlot[i,6]=32;           //Width
    QuickSlot[i,7]=32;           //Height
}
//Initialise data not for 10 slots, but 21.
//You will be able to shift+set 10 extra slots for right click.
//The 21st is to temporarily hold data when dragging a tile into 

//The contents of the Quick Slots
QuickSlotContent=surface_create(2048,2048);
surface_set_target(QuickSlotContent);
draw_clear_alpha(c_white,0);
surface_reset_target();

HoverContent=-1;
HoverX=0;

//Auto-open Tile Select on creation if you're in that mode
if (global.EditorMode==EDIT_PAINT)
{
    instance_create(60,60,oHUDTileSelect)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(QuickSlotContent)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control HUD

//Make the HUD invisible if you're not in EDIT mode
visible=(global.Mode==MODE_EDIT)

//This variable will detect if you changed slot so it can recalibrate
var changed=0;

if !instance_exists(oHUDTileSelect)
{
    //If you scroll your mouse wheel up, move the chosen slot left
    if (mouse_wheel_up() &amp;&amp; global.EditorMode==EDIT_PAINT)
    {
        QuickSlotSelected-=1;
        
        if (QuickSlotSelected)&lt;0 QuickSlotSelected+=QuickSlotMax;
        
        changed=1;    
    }
    
    //If you scroll your mouse wheel up, move the chosen slot right
    if (mouse_wheel_down() &amp;&amp; global.EditorMode==EDIT_PAINT)
    {
        QuickSlotSelected+=1;
        
        if (QuickSlotSelected)&gt;=QuickSlotMax QuickSlotSelected-=QuickSlotMax;
        
        changed=1;    
    }
}

//If you push a number key, select the corresponding slot
for(var i=0;i&lt;=9;i+=1)
{
    if (keyboard_check_pressed(ord(string(i))))
    {
        var qstarg=(i+9) mod QuickSlotMax;
        
        if (QuickSlotSelected!=qstarg)
        {
            QuickSlotSelected=qstarg;
            changed=1;
        }
    }
}

///Select a tile with the mouse
if mouse_click_rectangle(0,window_get_height()-64,window_get_width(),window_get_height())
{
    var idon=device_mouse_raw_x(0)-((window_get_width()/2)-318);
        idon/=636;
        idon*=10;
        idon=floor(idon);
       
    QuickSlotSelected=idon;
    changed=1;    
}

//If the slot was changed, switch the current placing to that slot's contents
if (changed &amp;&amp; QuickSlot[QuickSlotSelected,2]&gt;-1)
{
    global.EditorMode=QuickSlot[QuickSlotSelected,0]
    global.EditorMode_Sub=QuickSlot[QuickSlotSelected,1]
    global.LeftMouseTile=QuickSlot[QuickSlotSelected,2]
    global.RightMouseTile=QuickSlot[QuickSlotSelected+QuickSlotMax,2]
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw and operate HUD top buttons

if( instance_exists(oHeadMenu) ) exit;

Tooltip=""; //Tooltip text

buttonX=0;  //Current button X
buttonY=0;  //Current button Y
buttonI=0;  //Current button Sprite Index
buttonS=40; //Current button size in pixels

if( ButtonControlFull(sprNavNew,0,"NEW",true) )
{
    NewMap();
}

if( ButtonControlFull(sprNavSave,0,"SAVE [F2]",true) )
{
    with(oMap) event_perform(ev_keypress,vk_f2);
}

if( ButtonControlFull(sprNavOpen,0,"OPEN [F3]",true) )
{
    with(oMap) event_perform(ev_keypress,vk_f3);
}

ButtonDivider()
   
if( ButtonControlFull(sprNavCube,0,"PLACE BLOCKS",true) )
{
    global.EditorMode=EDIT_SELECTION;
    global.EditorMode_Sub=EDIT_SUB_NONE;
}

if( ButtonControlFull(sprNavPaint,0,"PAINT",true) ) {}

if( ButtonControlFull(sprNavDecals,0,"PLACE DECALS",true) )
{
    global.EditorMode=EDIT_SPRITES;
    global.EditorMode_Sub=EDIT_SUB_NONE;
    
    if !instance_exists(oHUDDecalSelect)
    {
        with(oHUDParent)
            instance_destroy();
        instance_create(60,60,oHUDDecalSelect)
    }
    else if (global.EditorMode==EDIT_SPRITES)
    {
        with(oHUDParent)
            instance_destroy();
    }        
}

if( ButtonControlFull(sprNavObjects,0,"PLACE OBJECTS",true) )
{
    global.EditorMode=EDIT_OBJECTS;
    global.EditorMode_Sub=EDIT_SUB_NONE;
    with(oHUDParent) instance_destroy()        
}

ButtonDivider()

if( ButtonControlFull(sprNavRotL,0,"ROTATE TILE AC",true) )
{
    global.FlipRotateFlags=0;
    rotate_value=(rotate_value+3)&amp;3;
    switch(rotate_value)
    {
        case 1: global.FlipRotateFlags=4; break;
        case 2: global.FlipRotateFlags=3; break;
        case 3: global.FlipRotateFlags=7; break;
    }
    if(dovflip) global.FlipRotateFlags^=1;
    if(dohflip) global.FlipRotateFlags^=2;
}
//buttonI+=rotate_value;
//draw_sprite(sButtonSprite[mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)],buttonI,buttonX,buttonY);
//draw_sprite(sprNavRotL,mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS),buttonX,buttonY)
//buttonX+=buttonS;
//buttonI+=3-rotate_value;

if( ButtonControlFull(sprNavRotR,0,"ROTATE TILE C",true) )
{
    global.FlipRotateFlags=0;
    rotate_value=(rotate_value+1)&amp;3;
    switch(rotate_value)
    {
        case 1: global.FlipRotateFlags=4; break;
        case 2: global.FlipRotateFlags=3; break;
        case 3: global.FlipRotateFlags=7; break;
    }
    if(dovflip) global.FlipRotateFlags^=1;
    if(dohflip) global.FlipRotateFlags^=2;
}
//buttonI+=rotate_value;
//draw_sprite(sButtonSprite[mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)],buttonI,buttonX,buttonY);
//draw_sprite(sprNavRotR,mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS),buttonX,buttonY)
//buttonX+=buttonS;
//buttonI+=3-rotate_value;


if( ButtonControlFull(sprNavFlipH,0,"FLIP TILE H",true) )
{
    global.FlipRotateFlags ^= 2;
}

if( ButtonControlFull(sprNavFlipV,0,"FLIP TILE V",true) )
{
    global.FlipRotateFlags ^= 1;
}

ButtonDivider()

if( ButtonControlFull(sprNavView,0,"VIEW",true) ) {}

ButtonDivider()

if( ButtonControlFull(sprSnapToGrid,global.snapToGrid,"TOGGLE SNAP TO GRID",true) )
{
    global.snapToGrid ^= true;
}

if( ButtonControlFull(sprToggleDecalsVisible,global.decalsVisible,"TOGGLE DECALS VISIBILITY",true) )
{
    global.decalsVisible ^= true;
}    


/*
//Play
draw_sprite(sButtonSprite[mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)],buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,"PLAY MODE [F1]") )
{
    with(oHUDMain) instance_destroy();
    with(oHUDParent) instance_destroy();
    with(oController) FreeCursorMode=0;
    global.Mode=MODE_PLAY;                    
}
buttonX+=buttonS;
;

//Hide Menu
draw_sprite(sButtonSprite[mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)],buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,"HIDE MENU [TAB]") )
{
    with(oHUDMain) instance_destroy();
    with(oHUDParent) instance_destroy();
    with(oController) FreeCursorMode=0;            
}
buttonX+=buttonS

*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw and operate HUD top button dropdowns

if( HoverContent==sprNavPaint )
{
    if( ButtonControlSub(sprNavPaintTops,0,"PAINT TILE TOPS") )
    {
        if !instance_exists(oHUDTileSelect)
        {
            with(oHUDParent) instance_destroy()
            instance_create(60,60,oHUDTileSelect)
        }
        else if (global.EditorMode==EDIT_PAINT &amp;&amp; global.EditorMode_Sub==EDIT_SUB_LID)
        {
            with(oHUDParent) instance_destroy()
        }        
        
        global.EditorMode=EDIT_PAINT;
        global.EditorMode_Sub=EDIT_SUB_LID;
    }
    
    if( ButtonControlSub(sprNavPaintSides,0,"PAINT TILE SIDES") )
    {
        if !instance_exists(oHUDTileSelect)
        {
            with(oHUDParent) instance_destroy()
            instance_create(60,60,oHUDTileSelect)
        }
        else if (global.EditorMode==EDIT_PAINT &amp;&amp; global.EditorMode_Sub==EDIT_SUB_SIDE)
        {
            with(oHUDParent) instance_destroy()
        }        
        
        global.EditorMode=EDIT_PAINT;
        global.EditorMode_Sub=EDIT_SUB_SIDE;
    }
}

if( HoverContent==sprNavView )
{
    if( ButtonControlSub(sprPedsTool,global.EditorMode==EDIT_PEDS,"PEDESTRIAN ZONE TOOL") )
    {
        if (global.EditorMode != EDIT_PEDS)
        {
            global.EditorMode = EDIT_PEDS;
        }    
        else
        {
            global.EditorMode=EDIT_SELECTION;
            global.EditorMode_Sub=EDIT_SUB_NONE;   
        }
    }
    
    if( ButtonControlSub(sprRoadsTool,global.EditorMode==EDIT_ROADS,"ROAD DIRECTION TOOL") )
    {                                                            
        global.EditorMode = EDIT_ROADS;
        if (!instance_exists(objRoadCompass))
        {
            with(objRoadCompass) instance_destroy();
            instance_create( 60, 240, objRoadCompass);
        }
        else if (global.EditorMode==EDIT_ROADS)
        {
            with(objRoadCompass) instance_destroy();
            global.EditorMode=EDIT_SELECTION;
            global.EditorMode_Sub=EDIT_SUB_NONE;   
        } 
    }
    
    if( ButtonControlSub(sprNavToggleRoadDir,global.renderRoadFlags*2,"TOGGLE DRAW ROAD FLAGS [F5]") )
    {
        global.renderRoadFlags ^= true;
    }
    
    if( ButtonControlSub(sprNavToggleTrafficSpawn,global.enableTrafficSpawn*2,"TOGGLE TRAFFIC SPAWNING") )
    {
        global.enableTrafficSpawn ^= true;
    }
    
    if( ButtonControlSub(sprNavToggleTraffic,2,"KILL TRAFFIC") )
    {
        with (objTrafficCar) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw and operate HUD tooltips

if (Tooltip!="")
{
    draw_set_font(fTwCenConS);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    var ttx=device_mouse_raw_x(0)+8, tty=device_mouse_raw_y(0)+32; //X and Y of tooltip draw coordinate
    var ttw=string_width(Tooltip), tth=string_height(Tooltip), tto=5; //Width, height and offset/margin of background
    
    draw_set_color(c_white);
    draw_rectangle(ttx-tto,tty-tto,ttx+ttw+tto,tty+tth+tto,0); //Draw background
    draw_set_color($EEEEEE);
    draw_rectangle(ttx-tto,tty-tto,ttx+ttw+tto,tty+tth+tto,1); //Draw outline
    draw_set_color(c_black);
    draw_text(ttx,tty,Tooltip); //Draw tooltip text
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw and operate HUD quick slots

if (instance_exists(oHeadMenu)) exit;

var slotw=60; sloth=60; sloto=4; //Set slot width, height, and offset between each other

var xx=(window_get_width()/2)-((slotw*(QuickSlotMax/2))+(sloto*((QuickSlotMax-1)/2)));
var yy=(window_get_height()-(sloth+sloto));

for(var i=0; i&lt;QuickSlotMax; i+=1)
{
    var qsID=i+(keyboard_check(vk_control)*QuickSlotMax);
    
    draw_sprite(sHUDQuickSlot,0,xx,yy);
    
    if (i==QuickSlotSelected)
    {                                                                              
        draw_sprite(sHUDQuickSlotHighlight,keyboard_check(vk_control),xx,yy)
    }
    
    //Draw the tile/sprite/etc
    
    if (QuickSlot[qsID,2]!=-1)
    {
        draw_sprite_part_ext(QuickSlot[qsID,3],0,
                             QuickSlot[qsID,4],QuickSlot[qsID,5],
                             QuickSlot[qsID,6],QuickSlot[qsID,7],
                             xx+5,yy+5,
                             50/QuickSlot[qsID,6],50/QuickSlot[qsID,7],
                             c_white,1)
    }
    
    if (instance_exists(oHUDParent))
    {
        if (oHUDParent.Holding==4)
        {
            draw_sprite_part_ext(QuickSlot[QuickSlotMax*2+1,3],0,
                                 QuickSlot[QuickSlotMax*2+1,4],QuickSlot[QuickSlotMax*2+1,5],
                                 QuickSlot[QuickSlotMax*2+1,6],QuickSlot[QuickSlotMax*2+1,7],
                                 device_mouse_raw_x(0)-25,device_mouse_raw_y(0)-25,
                                 50/QuickSlot[QuickSlotMax*2+1,6],50/QuickSlot[QuickSlotMax*2+1,7],
                                 c_white,1)
        }
    }
                         
    xx+=slotw+sloto;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
