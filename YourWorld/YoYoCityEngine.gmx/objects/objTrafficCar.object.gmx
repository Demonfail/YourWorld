<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprToyotaCorona</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Scale down car images to match game world scale
scale = 0.65;
image_xscale = scale;
image_yscale = scale;


// Choose a random car sprite
sprite_index = choose(
    sprToyotaCorona,
    sprMerc,
    sprStationWagon,
    sprPickup,
    sprVan,
    sprLamborghini
    );
    

x1 = 0;
y1 = 0;
x2 = sprite_width;
y2 = sprite_height;
bodyFixture = physics_fixture_create();
var xoff = sprite_xoffset*1.5;
var yoff = sprite_yoffset*1.5;
// Define shape, currently based on sprite size
physics_fixture_set_polygon_shape(bodyFixture);
physics_fixture_add_point(bodyFixture, x1-xoff*scale, y1-yoff*scale);
physics_fixture_add_point(bodyFixture, x2-xoff*scale, y1-yoff*scale);
physics_fixture_add_point(bodyFixture, x2-xoff*scale, y2-yoff*scale);
physics_fixture_add_point(bodyFixture, x1-xoff*scale, y2-yoff*scale);
// Define properties
physics_fixture_set_density(bodyFixture, 1.5);
physics_fixture_set_restitution(bodyFixture, 0.25);
physics_fixture_set_collision_group(bodyFixture, 1);
physics_fixture_set_linear_damping(bodyFixture, 0.6);
physics_fixture_set_angular_damping(bodyFixture, 2.0);
physics_fixture_set_friction(bodyFixture, 0);
physics_fixture_set_awake(bodyFixture, true);
// Bind to object and destroy to finish
physics_fixture_bind(bodyFixture, id);


// Movement variables
Speed = 0;
DesiredSpeed = 4;
VisualX = x;
VisualY = y;
DesiredX = x;
DesiredY = y;
myCellX = floor(x/64);
myCellY = ceil(y/64);
myCellZ = 4;
Direction = direction;
DesiredDirection = direction;
Animate = false;
active = true;


// Route finding setup
routeCoordinates = ds_list_create();
occupiedCells = ds_list_create();
madeDecision = false;
parked = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Clear all cells occupied by this car's route
OccupyEmpty(occupiedCells);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//-----------------------------------------------------------------------------
// Despawn if too far away from player
halfRegion = round(-oCamera.CameraZ)+8*64;
if (point_distance(x, y, oCamera.CameraX, oCamera.CameraY) &gt; halfRegion)
    {
    instance_destroy();
    exit;
    }

    
if (active)
    {
    //-----------------------------------------------------------------------------
    // If we are close to our destination point
    if (point_distance(x, y, DesiredX, DesiredY) &lt; 48)
        {
        // Remove last cell from lists
        // Get unique cell id
        xx = ds_list_find_value(routeCoordinates, 0);
        yy = ds_list_find_value(routeCoordinates, 1);
        cellID = (yy * oMap.MapHeight) + xx;
        if (ds_list_find_value(occupiedCells, 0) != cellID)
            OccupyFree(occupiedCells, 0);
        
        ds_list_delete(routeCoordinates, 0);
        ds_list_delete(routeCoordinates, 0);
        ds_list_delete(routeCoordinates, 0);
        
        // We're NOT parked, we are moving
        if (!parked)
            {
            Animate = true;
            repeat (8)
                TrafficFindRoute();
            }
            
        // We are parking, and are closing in to final destination
        else if (point_distance(x, y, DesiredX, DesiredY) &gt; 8)
            {
            DesiredSpeed = 0;
            Animate = true;
            direction += (((((dir - direction) mod 360) + 540) mod 360) - 180)/10;
            }
            
        // We are fully parked
        else
            Animate = false;
        }
    
        
    //-----------------------------------------------------------------------------
    // Find suitable speed for current situation
    if (!parked)
        {
        // Mark cells as used by this vehicle
        OccupyCells(occupiedCells, routeCoordinates, 5);
        
        // If unable to plan a longer path, alter speed
        switch (ds_list_size(occupiedCells))
            {
            case (0): DesiredSpeed = 0; break;
            case (1): DesiredSpeed = 0; break;
            case (2): DesiredSpeed = 0; break;
            case (3): DesiredSpeed = 2; break;
            case (4): DesiredSpeed = 3; break;
            default:  DesiredSpeed = 4; break;
            }
            
        // Try not to run into another car
        /*
        xx = ds_list_find_value(routeCoordinates, 0)*64+32;
        yy = ds_list_find_value(routeCoordinates, 1)*64-32;
        inst = instance_nearest(xx, yy, objTrafficCar);
        if (point_distance(x, y, inst.x, inst.y) &lt; 64)
        &amp;&amp; (inst != id)
        //if (physics_test_overlap(x, y, phy_rotation, all))
            {
            DesiredSpeed = 0;
            show_debug_message("overlapping!");
            }*/
        }
        
        
    //-----------------------------------------------------------------------------
    // If we are moving, handle all the mathsy stuff
    if (Animate)
        {
        Speed += (DesiredSpeed-Speed)*0.05;
        dir = point_direction(x, y, DesiredX, DesiredY);
        direction += (((((dir - direction) mod 360) + 540) mod 360) - 180)/10;
        dist = point_distance(x, y, DesiredX, DesiredY);
        if (dist &gt; 2)
            {
            phy_position_x += lengthdir_x(Speed, direction);
            phy_position_y += lengthdir_y(Speed, direction);
            }
        phy_rotation = 180-direction+90;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>25,107</point>
    <point>54,54</point>
  </PhysicsShapePoints>
</object>
