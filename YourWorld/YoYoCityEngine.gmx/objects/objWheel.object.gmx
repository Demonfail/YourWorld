<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWheel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Tyre settings
maxMoveSpeed      = 0;
maxDriveForce     = 0;
maxLateralImpulse = 0;      // Basically grip, the lower this is the easier it is to slip
dragForce         = 0;
brakingPower      = 0;

// Modifiers. These are mulipliers (1 = full, 0.5 = half, 1.5 = +50%, etc)
modForwardSpeed   = 1;
modLateralImpulse = 1;
modDragForce      = 1;

// Control settings
controlState     = STATE_NONE;
forwardDirection = 90;          // (0, -1)
rightDirection   = 0;           // (1, 0)
currentSpeed     = 0;
//debug            = false;

//GetLateralVelocity();
//GetForwardVelocity();
//UpdateFriction();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
GetLateralVelocity();
forwardVelocity = GetForwardVelocity();
UpdateFriction();

// Reset modifiers
modDragForce      -= ((modDragForce-1)       /10)*scale;    // Reduce to 1
modLateralImpulse -= ((modLateralImpulse-1)  /20)*scale;    // Reduce to 1

var desiredSpeed = 0;
switch (controlState)
    {
    // Accelerate
    case (STATE_UP):
        desiredSpeed = -maxMoveSpeed;
        break;
        
    // Reverse
    case (STATE_DOWN):
        desiredSpeed = maxMoveSpeed;
        break;
        
    case (STATE_LOOSE):
        exit;
        break;
    }
    
var force = 0;
// Braking
if (controlState == STATE_BRAKE)
    {
    force = (sign(forwardVelocity)*(maxMoveSpeed-abs(forwardVelocity*0.8)))*brakingPower;
    }
// Decellerating
else if (desiredSpeed == 0)
    {
    force = (sign(forwardVelocity)*(maxMoveSpeed-abs(forwardVelocity*0.7)))*1;
    }
// Drive backwards?
else if (desiredSpeed &gt; -forwardVelocity)
    {
    force = maxDriveForce;
    }
// Drive forwards?
else if (desiredSpeed &lt; forwardVelocity)
    {
    force = -maxDriveForce;
    }

physics_apply_local_force(0, 0, 0, force);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.drawDebug)
    {
    // Draw the line to represnt the impulse applied to cancel sideways movement
    var previousmat = matrix_get(matrix_world);
    var mat = matrix_build(0, 0, -257, 0, 0, 0, 1, 1, 1);
    matrix_set(matrix_world, mat);
    d3d_set_lighting(false);
    
    draw_set_color(c_gray);
    draw_line_width(x, y, x-impulseX*20, y-impulseY*20, 12);
    
    draw_set_color(c_green);
    draw_line_width(x, y, x+lateralX*20, y+lateralY*20, 3);
    
    draw_set_color(c_blue);
    draw_line(x, y, x+phy_speed_x*20, y+phy_speed_y*20);
    
    draw_set_color(c_red);
    draw_line(x, y, x+lengthdir_x(64, GetWorldDirection(0)), y+lengthdir_y(64, GetWorldDirection(0)));
    draw_line(x, y, x+lengthdir_x(-64, GetWorldDirection(0)), y+lengthdir_y(-64, GetWorldDirection(0)));
    
    // Restore previous matrix and lighting
    matrix_set(matrix_world, previousmat);
    d3d_set_lighting(true);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>13,0</point>
    <point>13,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
