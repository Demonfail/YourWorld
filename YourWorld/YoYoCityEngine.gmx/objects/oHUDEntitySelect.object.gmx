<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10010</depth>
  <persistent>0</persistent>
  <parentName>oHUDParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving the window
if (Holding==1)
{
    x+=(device_mouse_raw_x(0)-device_mouse_raw_xprevious)
    y+=(device_mouse_raw_y(0)-device_mouse_raw_yprevious)
    
    x=clamp(x,-WindowWidth+10,window_get_width()-10)
    y=clamp(y,1,window_get_height()-10)
    
    device_mouse_raw_xprevious=device_mouse_raw_x(0)
    device_mouse_raw_yprevious=device_mouse_raw_y(0)
}
//Resizing the window
else if (Holding==2)
{
    WindowWidth+=(device_mouse_raw_x(0)-device_mouse_raw_xprevious)
    WindowHeight+=(device_mouse_raw_y(0)-device_mouse_raw_yprevious)
    
    WindowWidth =clamp(WindowWidth ,WindowWidthMin ,WindowWidthMax );
    WindowHeight=clamp(WindowHeight,WindowHeightMin,WindowHeightMax);
    
    WindowContentY=clamp(WindowContentY,0,abs(WindowContentYMin))
    
    device_mouse_raw_xprevious=device_mouse_raw_x(0)
    device_mouse_raw_yprevious=device_mouse_raw_y(0)
    
    WindowContentRedraw=true;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Holding=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_rectangle(x,y,x+WindowWidth,y+70)
{
    Holding=1;
    device_mouse_raw_xprevious=device_mouse_raw_x(0);
    device_mouse_raw_yprevious=device_mouse_raw_y(0);
}

if mouse_rectangle(x+WindowWidth-25,y+WindowHeight-25,x+WindowWidth,y+WindowHeight)
{
    Holding=2;
    device_mouse_raw_xprevious=device_mouse_raw_x(0);
    device_mouse_raw_yprevious=device_mouse_raw_y(0);
}

if mouse_rectangle(x+WindowWidth-25,y+101,x+WindowWidth,y+WindowHeight-56)
{
    Holding=3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(window_get_width(),window_get_height())

//Draw top rectangle and outline of window
draw_set_color(c_black)
draw_rectangle(x,y,x+WindowWidth,y+70,0)
draw_rectangle(x-3,y-3,x+WindowWidth+3,y+WindowHeight+3,1)

//Draw the window's caption
draw_set_color(c_white)
draw_set_font(fTwCenM)
draw_set_halign(fa_left)
draw_set_valign(fa_center)

//Draw the button selections
for( var i=1; i&lt;=ButtonMax; i+=1)
{
    var btnx1=x+3+((i-1)*38); //X location of this tab
    
    //Logic for selecting buttons
    if (mouse_click_rectangle(btnx1,y+3,btnx1+34,y+3+34))
    {
        global.EditorMode=i;
        global.EditorMode_Sub=EDIT_SUB_LID;
        if (Tab==ENTITY_TAB_TOPS) global.EditorMode_Sub=EDIT_SUB_LID;
    }
    
    //Selected colour
    if (i==global.EditorMode)
    {
        draw_set_color(c_gray);
        draw_rectangle(btnx1,y+3,btnx1+34,y+3+34,0);
    }
    
    //Outline
    draw_set_color(c_white);
    draw_rectangle(btnx1,y+3,btnx1+34,y+3+34,1);   
    
    //Img
    draw_sprite(sButtonImg,i-1,btnx1,y+3) 
} 

//Draw the tabs
draw_set_halign(fa_center)
draw_set_font(fTwCenConM)
for( var i=0; i&lt;=TabMax; i+=1)
{
    var tabx1=x+3+(i*85); //X location of this tab
    
    //Logic for selecting tabs
    if (mouse_click_rectangle(tabx1,y+41,tabx1+82,y+67))
    {
        Tab=i;
        if (Tab==ENTITY_TAB_TOPS) global.EditorMode_Sub=EDIT_SUB_LID;
        if (Tab==ENTITY_TAB_SIDES) global.EditorMode_Sub=EDIT_SUB_SIDE;
        WindowContentRedraw=true;
    }
    
    //Selected colour
    if (i==Tab)
    {
        draw_set_color(c_gray);
        draw_rectangle(tabx1,y+41,tabx1+82,y+67,0);
    }
    
    //Outline
    draw_set_color(c_white);
    draw_rectangle(tabx1,y+41,tabx1+82,y+67,1);   
    
    //Text
    var str="BLOCKS";
    if(i==ENTITY_TAB_SIDES) str="SIDES";
    if(i==ENTITY_TAB_TOPS) str="TOPS";
    if(i==ENTITY_TAB_SPRITES) str="SPRITES";
    if(i==ENTITY_TAB_OBJECTS) str="OBJECTS";
    draw_text(tabx1+41,y+54,str); 
}

//Draw the right hand bar
draw_set_color(c_black)
draw_rectangle(x+WindowWidth-25,y+WindowHeight-25,x+WindowWidth,y+WindowHeight,0) //Resize window
draw_rectangle(x+WindowWidth-25,y+73,x+WindowWidth,y+98,0) //Scrollbar up
draw_rectangle(x+WindowWidth-25,y+WindowHeight-53,x+WindowWidth,y+WindowHeight-28,0) //Scrollbar down

//Control &amp; draw scrolling
draw_set_color(c_white)
draw_rectangle(x+WindowWidth-25,y+101,x+WindowWidth,y+WindowHeight-56,0)
draw_set_color(c_black)
if (WindowContentYMin!=0) //Can scroll
{
    //Temporary variables
    var scrolly=0;
    var scrollymin=0;
    var scrollymax=WindowHeight-56-32-101;
    var scrollchanged=0;
    
    scrolly=lerp(scrollymin,scrollymax,abs(WindowContentY/WindowContentYMin))
    
    if (Holding==3)
    {
        scrolly=clamp(device_mouse_raw_y(0)-(y+101)-16,scrollymin,scrollymax)
        scrollchanged=1;
    }
    
    draw_rectangle(x+WindowWidth-25,y+scrolly+101,x+WindowWidth,y+scrolly+101+32,0)
    
    //If you press the "Up" scroll button or mouse wheel up
    if (mouse_click_rectangle(x+WindowWidth-25,y+73,x+WindowWidth,y+98)
        or (mouse_wheel_up() &amp;&amp; mouse_rectangle(x,y+73,x+WindowWidth-28,y+WindowHeight)))
    {
        scrolly=clamp(scrolly-20,scrollymin,scrollymax)
        scrollchanged=1;
    }
    //If you press the "Down" scroll button
    if (mouse_click_rectangle(x+WindowWidth-25,y+WindowHeight-53,x+WindowWidth,y+WindowHeight-28)
        or (mouse_wheel_down() &amp;&amp; mouse_rectangle(x,y+73,x+WindowWidth-28,y+WindowHeight)))
    {
        scrolly=clamp(scrolly+20,scrollymin,scrollymax)
        scrollchanged=1;
    }
    
    if (scrollchanged==1)
    {
        WindowContentY=-lerp(0,WindowContentYMin,abs(scrolly/scrollymax))
        WindowContentRedraw=true;
    }    
}

//Control &amp; draw window content
draw_set_color(c_white)

//If you click the surface, remember the click position to process tile selection
if (mouse_click_rectangle(x,y+73,x+WindowWidth-28,y+WindowHeight))
{
    WindowContentClicked=true;
    WindowContentRedraw=true;
    WindowContentClickedX=device_mouse_raw_x(0)-(x);
    WindowContentClickedY=device_mouse_raw_y(0)-(y+73)+(WindowContentY);
}
draw_surface_part(WindowContent,0,WindowContentY,WindowWidth-28,WindowHeight-73,x,y+WindowContentDrawY)

draw_set_color(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw window content

if (!surface_exists(WindowContent))
{
    WindowContentRedraw=true;
    WindowContent=surface_create(1024,1024);
}

if (WindowContentRedraw==true
&amp;&amp; instance_exists(oMap))
{
    d3d_end();
    d3d_set_lighting(false);
    surface_set_target(WindowContent);
    draw_clear(c_white);
    
    var iteration=0, iterationMax=0;
    
    //Read the group/entity details from the supplied .ini file
    ini_open("style1.yyg")
    for(var i=0; i&lt;=ENTITY_TAB_MAX; i+=1)
    {
        var itemOn="blocks";
        if (i==ENTITY_TAB_SIDES  ) itemOn="sides";
        if (i==ENTITY_TAB_TOPS   ) itemOn="tops";
        if (i==ENTITY_TAB_SPRITES) itemOn="sprites";
        if (i==ENTITY_TAB_OBJECTS) itemOn="objects";
        
        itemMax[ENTITY_TAB_BLOCKS] =ini_read_real("details","tilesGroupCount",0)
        itemMax[ENTITY_TAB_SIDES]  =ini_read_real("details","tilesGroupCount",0)
        itemMax[ENTITY_TAB_TOPS]   =ini_read_real("details","tilesGroupCount",0)
        itemMax[ENTITY_TAB_SPRITES]=ini_read_real("details","spritesGroupCount",0)
        itemMax[ENTITY_TAB_OBJECTS]=ini_read_real("details","objectsGroupCount",0)
        
        for(var j=0; j&lt;itemMax[i]; j+=1)
        {
            if (i==ENTITY_TAB_SPRITES or i==ENTITY_TAB_OBJECTS)
            {
                var itemName; itemName[i,j]=ini_read_string(itemOn,"name"+string(j),"MISSINGNO");
                var itemDesc; itemDesc[i,j]=ini_read_string(itemOn,"desc"+string(j),"MISSINGNO");
                var itemListPred           =ini_read_string(itemOn,"list"+string(j),"0,1");
            }
            else
            {
                var itemName; itemName[i,j]=ini_read_string("tiles","name"+string(j),"MISSINGNO");
                var itemDesc; itemDesc[i,j]=ini_read_string("tiles","desc"+string(j),"MISSINGNO");
                var itemListPred           =ini_read_string("tiles",itemOn+"_list"+string(j),"0,1");
            }
            
            //This turns the ini file's string eg "0,1,4,7,12,13,14" into
            //a queue of those numbers as real values
            var itemList; itemList[i,j]=ds_queue_create();
            
            while (string_length(itemListPred)&gt;0)
            {
                if (string_pos(",",itemListPred))
                {
                    var pos=string_pos(",",itemListPred);
                    ds_queue_enqueue(itemList[i,j],real(string_copy(itemListPred,1,pos-1)))
                    itemListPred=string_copy(itemListPred,pos+1,string_length(itemListPred)-(pos))
                }
                else
                {
                    ds_queue_enqueue(itemList[i,j],real(itemListPred))
                    itemListPred=""
                }        
            }
        }
    }
    ini_close()
    
    //Set tileset
    var tilesprite=sStyle1, spritewidth=sprite_get_width(tilesprite);
    //Set tile sizes
    var tileW=70, tileH=70, tileActW=64, tileActH=64, tileDiffX=(tileW-tileActW)/2, tileDiffY=(tileH-tileActH)/2;
    //Set tile count and current location/number
    var maxsprite=38, cursprite=0, curX=0, curY=0;
    //Set drawing positions and constraints
    var drawX=0, drawY=0, drawXoff=32, drawYoff=32, drawXmax=(WindowWidth-28-(drawXoff*2)), drawGap=16;
    
    //Loop through each of the groups, drawing its name, tiles etc
    for(var i=0; i&lt;itemMax[Tab]; i+=1)
    {
        //Start by drawing the group's name
        draw_set_color(c_black);
        draw_set_font(fTwCenM);
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);
        draw_text(drawXoff,drawY+drawYoff,string_upper(itemName[Tab,i]));
        
        drawY+=32
        
        //Go through the queue of tiles in this group, drawing and controlling each one
        while !ds_queue_empty(itemList[Tab,i])
        {
            cursprite=ds_queue_dequeue(itemList[Tab,i])
            if Tab!=ENTITY_TAB_SIDES cursprite+=oMap.TopBase
            
            //If you clicked the current tile, select it
            if (WindowContentClicked==true)
            {
                if (WindowContentClickedX&gt;drawX+drawXoff
                &amp;&amp;  WindowContentClickedY&gt;drawY+drawYoff
                &amp;&amp;  WindowContentClickedX&lt;drawX+drawXoff+tileActW
                &amp;&amp;  WindowContentClickedY&lt;drawY+drawYoff+tileActH) //If you clicked on this tile to select it
                {
                    WindowContentSelected[Tab]=cursprite
                    global.LeftMouseTile=cursprite
                    
                    if (Tab==ENTITY_TAB_TOPS or Tab==ENTITY_TAB_SIDES)
                    {
                        global.EditorMode=EDIT_PAINT;
                        
                        if (cursprite&gt;=oMap.TopBase)
                        {
                            global.LeftMouseTile-=oMap.TopBase;
                            global.EditorMode_Sub=EDIT_SUB_LID;    
                        }
                        else
                        {
                            global.EditorMode_Sub=EDIT_SUB_SIDE;
                        }
                    }
                    else if (Tab==ENTITY_TAB_BLOCKS)
                    {
                        global.EditorMode=EDIT_SELECTION
                        global.EditorMode_Sub=EDIT_SUB_NONE;
                    }    
                }
            }
            
            //Draw a border around this tile if it's the selected one
            if (WindowContentSelected[Tab]==cursprite)
            {
                draw_set_color(c_black)
                draw_rectangle(drawX+drawXoff-8,drawY+drawYoff-8,drawX+drawXoff+tileActW+8,drawY+drawYoff+tileActH+8,0)
                draw_set_color(c_white)
            }
            
            //Draw the sprite to the window content surface
            if (Tab==ENTITY_TAB_SPRITES)
            {
                //Draw the relevant sprite
                draw_sprite_pos(spriteInd[min(cursprite,spriteIndMax)],0,
                                drawX+drawXoff         ,drawY+drawYoff,
                                drawX+drawXoff+tileActW,drawY+drawYoff,
                                drawX+drawXoff+tileActW,drawY+drawYoff+tileActH,
                                drawX+drawXoff         ,drawY+drawYoff+tileActH,1)
            }
            else if (Tab==ENTITY_TAB_OBJECTS)
            {
                //Draw the relevant image preview of the object
                
            }
            else
            {
                curX=0; curY=0;
            
                //Find the coordinates of the current tile on the tile sheet
                repeat(cursprite)
                {
                    curX+=tileW;
                    if (curX+tileW&gt;spritewidth)
                    {
                        curX=0;
                        curY+=tileH;
                    }
                }
                
                //Draw the relevant section of the spritesheet
                draw_sprite_part(tilesprite,0,
                                 curX+tileDiffX,curY+tileDiffY,
                                 tileActW,tileActH,
                                 drawX+drawXoff,drawY+drawYoff);
            }
                             
            //Move boundaries as necessary
            if !ds_queue_empty(itemList[Tab,i])
            {
                drawX+=tileW+drawGap;
                if (drawX+tileW&gt;drawXmax+drawXoff)
                {
                    drawX=0;
                    drawY+=tileH+drawGap;
                }
            }
        }
        
        drawX=0;
        
        if(i&lt;itemMax[Tab]-1)
        {
            drawY+=tileH+drawGap+20;
        }
    }
    
    WindowContentHeight=drawY+tileH+(drawYoff*2)//1024;
    
    draw_set_color(c_white);
    surface_reset_target();
    d3d_start();
    d3d_set_lighting(true);
    WindowContentYMin=min(0,(WindowHeight-WindowContentDrawY)-WindowContentHeight);
    if (WindowContentClicked==true)
    {
        WindowContentClicked=false;
        WindowContentRedraw=true;
    }
    else
    {
        WindowContentRedraw=false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
