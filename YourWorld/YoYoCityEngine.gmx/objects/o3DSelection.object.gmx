<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the 3D
Controller = -1;
PickX1 = -1;
PickY1 = -1;
PickZ1 = -1;
PickX2 = -1;
PickY2 = -1;
PickZ2 = -1;
PickFace = -1;

// Mode 0 is full 3D cube, Mode 1 is the FACE we're painting only
Mode = 0;

// update check
LPickX1 = -1;
LPickY1 = -1;
LPickZ1 = -1;
LPickX2 = -1;
LPickY2 = -1;
LPickZ2 = -1;
LPickFace = -1;
Mode = 0;
vbuff = -1; 
ang=0;
colour = $a0ffffff;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy selection, and free the vertex buffer
//show_debug_message("destroy selection");
if( vbuff&gt;=0 ) vertex_delete_buffer(vbuff);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Build and Draw the selection region

if( LPickX1!=PickX1 || LPickY1!=PickY1  || LPickZ1!=PickZ1 || LPickX2!=PickX2 || LPickY2!=PickY2  || LPickZ2!=PickZ2 )
{
    if( vbuff&gt;=0 ) vertex_delete_buffer(vbuff);
    vbuff = vertex_create_buffer_ext(1*1024);
    
    LPickX1=PickX1;
    LPickY1=PickY1;
    LPickZ1=PickZ1;
    LPickX2=PickX2;
    LPickY2=PickY2;
    LPickZ2=PickZ2;
    var x1,y1,z2,x2,y2,z2,buff,t;
    
    buff = vbuff;

    x1 = PickX1;
    y1 = PickY1;
    z1 = PickZ1;
    x2 = PickX2;
    y2 = PickY2;
    z2 = PickZ2;
    if( x2&lt;x1){t=x1; x1=x2; x2=t; }
    if( y2&lt;y1){t=y1; y1=y2; y2=t; }
    if( z2&lt;z1){t=z1; z1=z2; z2=t; }

    x2++;
    y2++;
    z2++;
        
    z1--;
    z2--;
    
    x1 = (x1 * 64);
    y1 = (y1 * 64);
    z1 = (z1 * 64);
    x2 = (x2 * 64);
    y2 = (y2 * 64);
    z2 = (z2 * 64);
    
    x1 -= 2;
    y1 -= 2;
    z1 -= 2;

    x2 += 2;
    y2 += 2;
    z2 += 2;
    
    y1 = -y1;
    z1 = -z1;
    y2 = -y2;
    z2 = -z2;
    

    vertex_begin(buff,global.SelectionFormat);
    
    if( Mode==0 || PickFace==2 )
    {
        // top
        vertex_position_3d(buff, x1,y2,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y2,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y2,z2);
        vertex_argb(buff,colour);
        
        vertex_position_3d(buff, x2,y2,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y2,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y2,z1);
        vertex_argb(buff,colour);
    }

    if( Mode==0 || PickFace==1 )
    {
        // bottom
        vertex_position_3d(buff, x1,y1,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y1,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y1,z2);
        vertex_argb(buff,colour);
          
        vertex_position_3d(buff, x2,y1,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y1,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y1,z1);
        vertex_argb(buff,colour);
    }
        
    if( Mode==0 || PickFace==3 )
    {
        // left
        vertex_position_3d(buff, x1,y1,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y1,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y2,z2);
        vertex_argb(buff,colour);
        
        vertex_position_3d(buff, x1,y2,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y2,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y1,z1);
        vertex_argb(buff,colour);
    }

    if( Mode==0 || PickFace==4 )
    {
        // right
        vertex_position_3d(buff, x2,y1,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y2,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y2,z2);
        vertex_argb(buff,colour);
              
        vertex_position_3d(buff, x2,y2,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y1,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y1,z1);
        vertex_argb(buff,colour);
    }

    if( Mode==0 || PickFace==6 )
    {
        // lid    
        vertex_position_3d(buff, x1,y1,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y2,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y2,z1);
        vertex_argb(buff,colour);
        
        vertex_position_3d(buff, x2,y2,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y1,z1);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y1,z1);
        vertex_argb(buff,colour);
    }
        

    if( Mode==0 || PickFace==5 )
    {
        // base
        vertex_position_3d(buff, x2,y2,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y2,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x1,y1,z2);
        vertex_argb(buff,colour);
           
        vertex_position_3d(buff, x1,y1,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y1,z2);
        vertex_argb(buff,colour);
        vertex_position_3d(buff, x2,y2,z2);
        vertex_argb(buff,colour);
    }
    
    vertex_end(buff);
    vertex_freeze(buff);
}
    

if( vbuff &gt;=0 ){
    var m = matrix_build(0,0,0,0,0,0,1,1,1);
    matrix_set(matrix_world,m);
    
    d3d_set_zwriteenable(false);
    vertex_submit( vbuff, pr_trianglelist, 0 );
    d3d_set_zwriteenable(true);
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
